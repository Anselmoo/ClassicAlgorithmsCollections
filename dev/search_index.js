var documenterSearchIndex = {"docs":
[{"location":"man/guide/#Package-Guide","page":"Guide","title":"Package Guide","text":"","category":"section"},{"location":"man/guide/#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"ClassicAlgorithmsCollections is a registered package and so can be installed via Pkg.add.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Pkg.add(\"ClassicAlgorithmsCollections\")","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"This package supports Julia â‰¥1.5.","category":"page"},{"location":"man/guide/#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"To use ClassicAlgorithmsCollections.jl in your project,","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"using ClassicAlgorithmsCollections","category":"page"},{"location":"man/guide/#Accessing-Documentation-from-REPL","page":"Guide","title":"Accessing Documentation from REPL","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"All docs found here can also be accessed via REPL through Julia's help functionality.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"julia> using ClassicAlgorithmsCollections\n\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ClassicAlgorithmsCollections","category":"page"},{"location":"#ClassicAlgorithmsCollections.jl","page":"Home","title":"ClassicAlgorithmsCollections.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package with a collection of classical algorithms re-implemented in JULIA.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThe ClassicAlgorithmsCollections.jl is initially inspired by Geeksforgeeks' Top-10-Algorithms-in-Interview-Questions and should be continuously expanded by new algorithms or more elegant implementations.","category":"page"},{"location":"#Content","page":"Home","title":"Content","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/guide.md\",\n    \"man/SortingAndSearching.md\"\n]\nDepth = 3","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"man/SortingAndSearching/#Algorithms","page":"Sorting and Searching","title":"Algorithms","text":"","category":"section"},{"location":"man/SortingAndSearching/#Search-Algorithms","page":"Sorting and Searching","title":"Search-Algorithms","text":"","category":"section"},{"location":"man/SortingAndSearching/","page":"Sorting and Searching","title":"Sorting and Searching","text":"binary_search","category":"page"},{"location":"man/SortingAndSearching/#ClassicAlgorithmsCollections.binary_search","page":"Sorting and Searching","title":"ClassicAlgorithmsCollections.binary_search","text":"binary_search(array::Array{Int64,1}, target::Int64)\n\nThe binary search algorithm (BSA) finds a target value's position within a sorted array by  using a half-interval cut per each cycle. Thus, the BSA compares the target value to the  value of the array's middle element. In the case of inequality, the half array-piece in  which the target cannot be will be erased. Next, the search continues on the remaining  half array-piece and starts taking the middle element to compare it to the target value. This procedure has to be continued until the target value is found. The search may have to  be stopped with a remaining empty half array-piece; consequently, the target is not in the  array. For more information see: https://en.wikipedia.org/wiki/Binarysearchalgorithm\n\nArguments\n\narray::Array{Int64,1}: Sorted array of integers\ntarget::Int64: Target-value to find the position \n\nExamples\n\njulia> arr = [10,11, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 33, 35, 42, 47]\njulia> target = 12\njulia> ClassicAlgorithmsCollections.binary_search(arr, target)\n3\n\n\n\n\n\n","category":"function"},{"location":"man/SortingAndSearching/#Sorting-Algorithms","page":"Sorting and Searching","title":"Sorting-Algorithms","text":"","category":"section"}]
}
